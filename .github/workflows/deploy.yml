name: Deploy to EKS
on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      NEXTAUTH_URL: https://www.fsbone.com
      NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
      AUTH_TRUST_HOST: true
    
    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Debug environment variables
      env:
        AUTH_URL: ${{ secrets.AUTH_URL }}
        AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
        NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
        DATABASE_USER: ${{ secrets.DATABASE_USER }}
        DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
        DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
        DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
      run: |
        echo "Checking environment variables..."
        echo "AUTH_URL exists: ${{ secrets.AUTH_URL != '' }}"
        echo "AUTH_SECRET exists: ${{ secrets.AUTH_SECRET != '' }}"
        echo "NEXTAUTH_URL exists: ${{ secrets.NEXTAUTH_URL != '' }}"
        echo "NEXTAUTH_SECRET exists: ${{ secrets.NEXTAUTH_SECRET != '' }}"
        echo "DATABASE_URL exists: ${{ secrets.DATABASE_URL != '' }}"
        echo "DATABASE_HOST exists: ${{ secrets.DATABASE_HOST != '' }}"
        echo "DATABASE_USER exists: ${{ secrets.DATABASE_USER != '' }}"
        echo "DATABASE_PASSWORD exists: ${{ secrets.DATABASE_PASSWORD != '' }}"
        echo "DATABASE_NAME exists: ${{ secrets.DATABASE_NAME != '' }}"
        echo "DATABASE_PORT exists: ${{ secrets.DATABASE_PORT != '' }}"

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: 864981727549.dkr.ecr.ap-northeast-2.amazonaws.com
        ECR_REPOSITORY: fsbone-app
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Building Docker image..."
        docker build \
          --build-arg AUTH_URL=${{ secrets.AUTH_URL }} \
          --build-arg AUTH_SECRET=${{ secrets.AUTH_SECRET }} \
          --build-arg NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }} \
          --build-arg NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }} \
          --build-arg DATABASE_URL=${{ secrets.DATABASE_URL }} \
          --build-arg DATABASE_HOST=${{ secrets.DATABASE_HOST }} \
          --build-arg DATABASE_USER=${{ secrets.DATABASE_USER }} \
          --build-arg DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
          --build-arg DATABASE_NAME=${{ secrets.DATABASE_NAME }} \
          --build-arg DATABASE_PORT=${{ secrets.DATABASE_PORT }} \
          -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} .
        docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
        docker tag ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest
        docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest
        echo "::set-output name=image::${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"

    - name: Deploy to EKS
      run: |
        aws eks update-kubeconfig --name fsbone-cluster --region ap-northeast-2
        kubectl set image deployment/fsbone-app fsbone-app=${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
        kubectl rollout restart deployment fsbone-app
        
    - name: Debug deployment
      if: ${{ failure() }}
      run: |
        echo "=== Deployment Status ==="
        kubectl describe deployment fsbone-app
        
        echo "=== Pod Status ==="
        kubectl get pods -l app=fsbone-app
        
        echo "=== Pod Logs ==="
        for pod in $(kubectl get pods -l app=fsbone-app -o jsonpath='{.items[*].metadata.name}'); do
          echo "Logs for $pod:"
          kubectl logs $pod --all-containers --tail=50
        done
        
        echo "=== Events ==="
        kubectl get events --sort-by='.lastTimestamp'