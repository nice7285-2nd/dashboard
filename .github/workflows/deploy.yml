name: Deploy to ECS
on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      NEXTAUTH_URL: https://www.fsbone.com
      NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
      AUTH_TRUST_HOST: true
    
    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push image to ECR
      env:
        ECR_REGISTRY: 864981727549.dkr.ecr.ap-northeast-2.amazonaws.com
        ECR_REPOSITORY: fsbone-app
        IMAGE_TAG: latest
      run: |
        docker build \
          --build-arg AUTH_URL=${{ secrets.AUTH_URL }} \
          --build-arg AUTH_SECRET=${{ secrets.AUTH_SECRET }} \
          --build-arg NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }} \
          --build-arg NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }} \
          --build-arg DATABASE_URL=${{ secrets.DATABASE_URL }} \
          --build-arg DATABASE_HOST=${{ secrets.DATABASE_HOST }} \
          --build-arg DATABASE_USER=${{ secrets.DATABASE_USER }} \
          --build-arg DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
          --build-arg DATABASE_NAME=${{ secrets.DATABASE_NAME }} \
          --build-arg DATABASE_PORT=${{ secrets.DATABASE_PORT }} \
          --build-arg AWS_REGION=${{ secrets.AWS_REGION }} \
          --build-arg AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }} \
          --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
          --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
          --build-arg NEXT_PUBLIC_AWS_REGION=${{ secrets.NEXT_PUBLIC_AWS_REGION }} \
          --build-arg NEXT_PUBLIC_AWS_BUCKET_NAME=${{ secrets.NEXT_PUBLIC_AWS_BUCKET_NAME }} \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Clean up old ECR images
      run: |
        # latest가 아닌 모든 이미지 삭제
        IMAGES_TO_DELETE=$(aws ecr list-images \
          --repository-name fsbone-app \
          --query 'imageIds[?imageTag!=`latest`]' \
          --output json)
        
        if [ "$IMAGES_TO_DELETE" != "[]" ]; then
          aws ecr batch-delete-image \
            --repository-name fsbone-app \
            --image-ids "$IMAGES_TO_DELETE"
        fi

    - name: Update task definition
      run: |
        aws ecs register-task-definition \
          --family fsbone-task \
          --cli-input-json file://task-definition.json

    - name: Update ECS service
      run: |
        aws ecs update-service \
          --cluster fsbone-cluster \
          --service fsbone-service \
          --force-new-deployment